import React, { useState, useEffect } from 'react';
import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Line, LineChart, ReferenceLine } from 'recharts';
import { TrendingUp, Activity, DollarSign, Twitter, Send, Info, Moon, Sun } from 'lucide-react';

interface AITrader {
  name: string;
  balance: number;
  status: 'analyzing' | 'trading' | 'waiting';
  strategy: string;
  winRate: number;
  trades: number;
  totalPnL: number;
  color: string;
}

interface TradeMessage {
  trader: string;
  message: string;
  timestamp: string;
}

interface ChartDataPoint {
  time: string;
  [key: string]: number | string;
}

interface CryptoPrice {
  symbol: string;
  price: number;
  change24h: number;
}

const App: React.FC = () => {
  const [loading, setLoading] = useState(true);
  const [progress, setProgress] = useState(0);
  const [loadingMessage, setLoadingMessage] = useState('Initializing system...');
  const [darkMode, setDarkMode] = useState(true); // Default to dark mode
  const [chartData, setChartData] = useState<ChartDataPoint[]>([]);
  const [cryptoPrices, setCryptoPrices] = useState<CryptoPrice[]>([
    { symbol: 'BTC', price: 0, change24h: 0 },
    { symbol: 'ETH', price: 0, change24h: 0 },
    { symbol: 'SOL', price: 0, change24h: 0 },
    { symbol: 'BNB', price: 0, change24h: 0 },
    { symbol: 'DOGE', price: 0, change24h: 0 },
    { symbol: 'XRP', price: 0, change24h: 0 }
  ]);
  const [aiTraders, setAiTraders] = useState<AITrader[]>([
    { name: 'GROK', balance: 200, status: 'analyzing', strategy: 'Momentum Trading', winRate: 0, trades: 0, totalPnL: 0, color: '#4169e1' },
    { name: 'CLAUDE', balance: 200, status: 'analyzing', strategy: 'Mean Reversion', winRate: 0, trades: 0, totalPnL: 0, color: '#000000' },
    { name: 'CHATGPT', balance: 200, status: 'analyzing', strategy: 'Trend Following', winRate: 0, trades: 0, totalPnL: 0, color: '#ff6347' },
    { name: 'DEEPSEEK', balance: 200, status: 'analyzing', strategy: 'Statistical Arbitrage', winRate: 0, trades: 0, totalPnL: 0, color: '#9370db' },
    { name: 'GEMINI', balance: 200, status: 'analyzing', strategy: 'Breakout Trading', winRate: 0, trades: 0, totalPnL: 0, color: '#20b2aa' }
  ]);
  const [messages, setMessages] = useState<TradeMessage[]>([]);
  const [timeElapsed, setTimeElapsed] = useState(0);

  const cryptoPairs = ['BTC-USD', 'ETH-USD', 'SOL-USD', 'ARB-USD', 'AVAX-USD'];
  const actions = ['LONG', 'SHORT', 'CLOSE'];

  const tradingReasonings = [
    (name: string, pair: string, action: string, price: number) =>
      `${name}: Detected pattern on ${pair}. ${action} @ $${price.toFixed(2)}`,
    (name: string, pair: string, action: string) =>
      `${name}: RSI signal ${pair}. Executing ${action} 3x leverage`,
    (name: string, pair: string) =>
      `${name}: Volume accumulation ${pair}. Adjusting strategy`,
    (name: string, profit: number) =>
      `${name}: Closed ${profit > 0 ? '+' : ''}$${profit.toFixed(2)}`,
    (name: string, pair: string) =>
      `${name}: Limit order ${pair}. Waiting target`,
  ];

  // Loading effect
  useEffect(() => {
    const messages = [
      'Initializing system...',
      'Loading AI models...',
      'Connecting to Hyperliquid...',
      'Initializing GROK trader...',
      'Initializing CLAUDE trader...',
      'Initializing CHATGPT trader...',
      'Initializing DEEPSEEK trader...',
      'Initializing GEMINI trader...',
      'Starting trading engine...',
      'System ready!'
    ];

    let currentStep = 0;
    const totalSteps = messages.length;

    const loadingInterval = setInterval(() => {
      if (currentStep < totalSteps) {
        setLoadingMessage(messages[currentStep]);
        setProgress(((currentStep + 1) / totalSteps) * 100);
        currentStep++;
      } else {
        clearInterval(loadingInterval);
        setTimeout(() => setLoading(false), 500);
      }
    }, 400);

    return () => clearInterval(loadingInterval);
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      setTimeElapsed(prev => prev + 1);
      setAiTraders(prev => prev.map(trader => {
        const changePercent = (Math.random() - 0.47) * 3;
        const change = trader.balance * (changePercent / 100);
        const newBalance = Math.max(50, trader.balance + change);
        const tradeWon = change > 0;
        const pair = cryptoPairs[Math.floor(Math.random() * cryptoPairs.length)];
        const action = actions[Math.floor(Math.random() * actions.length)];
        const price = Math.random() * 50000 + 20000;
        const reasoningTemplate = tradingReasonings[Math.floor(Math.random() * tradingReasonings.length)];
        let message: string;
        if (reasoningTemplate.length === 4) message = reasoningTemplate(trader.name, pair, action, price);
        else if (reasoningTemplate.length === 3) message = reasoningTemplate(trader.name, pair, action);
        else if (reasoningTemplate.length === 2) message = reasoningTemplate(trader.name, change);
        else message = reasoningTemplate(trader.name, pair);
        if (Math.random() > 0.6) {
          setMessages(prev => [
            { trader: trader.name, message, timestamp: new Date().toLocaleTimeString('en-US', { hour12: false }) },
            ...prev.slice(0, 99)
          ]);
        }
        const newTotalTrades = trader.trades + 1;
        const newWinningTrades = tradeWon ? (trader.winRate * trader.trades / 100) + 1 : (trader.winRate * trader.trades / 100);
        const newWinRate = newTotalTrades > 0 ? (newWinningTrades / newTotalTrades) * 100 : 0;
        return {
          ...trader,
          balance: newBalance,
          totalPnL: newBalance - 200,
          status: Math.random() > 0.7 ? 'trading' : (Math.random() > 0.5 ? 'analyzing' : 'waiting'),
          trades: newTotalTrades,
          winRate: newWinRate
        };
      }));
    }, 1500);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    const chartInterval = setInterval(() => {
      setChartData(prev => {
        const newPoint: ChartDataPoint = { time: new Date().toLocaleTimeString('en-US', { hour12: false }) };
        aiTraders.forEach(trader => { newPoint[trader.name] = trader.balance; });
        return [...prev, newPoint].slice(-60);
      });
    }, 1500);
    return () => clearInterval(chartInterval);
  }, [aiTraders]);

  // Fetch crypto prices in real-time using Binance WebSocket and REST API
  useEffect(() => {
    const symbols = [
      { binance: 'BTCUSDT', symbol: 'BTC' },
      { binance: 'ETHUSDT', symbol: 'ETH' },
      { binance: 'SOLUSDT', symbol: 'SOL' },
      { binance: 'BNBUSDT', symbol: 'BNB' },
      { binance: 'DOGEUSDT', symbol: 'DOGE' },
      { binance: 'XRPUSDT', symbol: 'XRP' }
    ];

    // Store for 24h price changes
    const priceChanges: { [key: string]: number } = {};

    // Fetch 24h statistics from Binance
    const fetch24hStats = async () => {
      try {
        for (const { binance, symbol } of symbols) {
          const response = await fetch(`https://api.binance.com/api/v3/ticker/24hr?symbol=${binance}`);
          const data = await response.json();
          priceChanges[symbol] = parseFloat(data.priceChangePercent || '0');
        }
      } catch (error) {
        console.error('Error fetching 24h stats:', error);
      }
    };

    // Initial fetch of 24h stats
    fetch24hStats();

    // Update 24h stats every 60 seconds
    const statsInterval = setInterval(fetch24hStats, 60000);

    // WebSocket connections for real-time price updates
    const streams = symbols.map(s => `${s.binance.toLowerCase()}@ticker`).join('/');
    const ws = new WebSocket(`wss://stream.binance.com:9443/stream?streams=${streams}`);

    ws.onmessage = (event) => {
      try {
        const message = JSON.parse(event.data);
        if (message.data) {
          const ticker = message.data;
          const symbolInfo = symbols.find(s => s.binance === ticker.s);

          if (symbolInfo) {
            setCryptoPrices(prev => {
              const newPrices = [...prev];
              const index = newPrices.findIndex(p => p.symbol === symbolInfo.symbol);
              if (index !== -1) {
                newPrices[index] = {
                  symbol: symbolInfo.symbol,
                  price: parseFloat(ticker.c),
                  change24h: priceChanges[symbolInfo.symbol] || parseFloat(ticker.P)
                };
              }
              return newPrices;
            });
          }
        }
      } catch (error) {
        console.error('WebSocket message error:', error);
      }
    };

    ws.onerror = (error) => {
      console.error('WebSocket error:', error);
    };

    ws.onclose = () => {
      console.log('WebSocket connection closed');
    };

    return () => {
      ws.close();
      clearInterval(statsInterval);
    };
  }, []);

  const totalBalance = aiTraders.reduce((sum, trader) => sum + trader.balance, 0);
  const totalPnL = totalBalance - 1000;
  const totalPnLPercent = ((totalPnL / 1000) * 100).toFixed(2);
  const totalTrades = aiTraders.reduce((sum, trader) => sum + trader.trades, 0);

  // Apply dark mode class to body
  useEffect(() => {
    document.body.className = darkMode ? 'dark' : 'light';
  }, [darkMode]);

  // Loading Screen - Keep black for loading
  if (loading) {
    return (
      <div className="min-h-screen bg-black text-[#00d28a] flex items-center justify-center p-6">
        <div className="w-full max-w-2xl">
          {/* Logo */}
          <div className="flex justify-center mb-12">
            <img src="/logo.png" alt="Logo" className="h-64 opacity-80 animate-pulse" />
          </div>

          {/* Loading Message */}
          <div className="mb-8 text-center">
            <p className="text-xl font-mono mb-2">{loadingMessage}</p>
            <p className="text-sm text-[#00d28a]/60 font-mono">
              C:\SYSTEM\AI_TRADING&gt; LOADING...
            </p>
          </div>

          {/* CMD-style Progress Bar */}
          <div className="border border-[#00d28a] p-6">
            <div className="mb-4">
              <div className="flex items-center gap-2 mb-2">
                <span className="text-sm font-mono">PROGRESS:</span>
                <span className="text-sm font-mono">{Math.floor(progress)}%</span>
              </div>
              {/* Progress Bar Container */}
              <div className="border border-[#00d28a] h-8 relative overflow-hidden">
                {/* Progress Fill */}
                <div
                  className="h-full bg-[#00d28a] transition-all duration-300 ease-out"
                  style={{ width: `${progress}%` }}
                ></div>
                {/* CMD Block Characters */}
                <div className="absolute top-0 left-0 w-full h-full flex items-center px-2">
                  <span className="text-black font-mono text-sm font-bold" style={{ mixBlendMode: 'difference' }}>
                    {Array(Math.floor(progress / 2.5)).fill('█').join('')}
                  </span>
                </div>
              </div>
            </div>

            {/* Loading Steps */}
            <div className="space-y-1 text-xs font-mono text-[#00d28a]/60">
              <p>[OK] System initialization</p>
              <p>[OK] Neural network loading</p>
              <p>[OK] Blockchain connection</p>
              {progress > 30 && <p>[OK] AI agents deployment</p>}
              {progress > 60 && <p>[OK] Trading engine setup</p>}
              {progress > 90 && <p className="text-[#00d28a]">[OK] Ready to trade</p>}
            </div>
          </div>

          {/* Blinking Cursor */}
          <div className="mt-6 font-mono text-sm">
            <span className="text-[#00d28a]/60">$</span>
            <span className="animate-pulse ml-2">_</span>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={`min-h-screen p-6 ${darkMode ? 'text-[#00d28a]' : 'text-gray-900'}`}>
      <div className="max-w-[1920px] mx-auto space-y-6">

        {/* Header */}
        <div className={`rounded-lg p-6 fade-in ${darkMode ? 'glass' : 'glass-light border border-gray-300'}`}>
          <div className="flex items-center justify-between">
            <div className="flex items-baseline gap-4">
              <div className="w-2 h-2 bg-[#00d28a] rounded-full animate-pulse"></div>
              <div>
                <h1 className={`text-4xl font-bold ${darkMode ? 'text-[#00d28a]' : 'text-gray-900'}`}>AI TRADING SYSTEM</h1>
                <p className={`text-sm mt-2 ${darkMode ? 'text-[#00d28a]/60' : 'text-gray-500'}`}>Autonomous Intelligence for On-chain Networks</p>
              </div>
            </div>
            <div className="flex items-center gap-4">
              <button
                onClick={() => setDarkMode(!darkMode)}
                className={`p-2 rounded-lg transition-all ${darkMode ? 'bg-white/10 hover:bg-white/20' : 'bg-gray-200 hover:bg-gray-300'}`}
              >
                {darkMode ? <Sun size={20} className="text-[#00d28a]" /> : <Moon size={20} className="text-gray-700" />}
              </button>
              <img src="/logo.png" alt="Logo" className="h-12 opacity-80 hover:opacity-100 transition-opacity" />
            </div>
          </div>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-4 gap-4 fade-in">
          <div className="border border-gray-300 rounded-lg p-4 bg-white shadow-sm">
            <div className="flex items-center gap-2 mb-2 text-xs text-gray-500">
              <DollarSign size={14} />
              <span>TOTAL PORTFOLIO</span>
            </div>
            <div className="text-3xl font-bold text-gray-900">${totalBalance.toFixed(2)}</div>
            <div className={`text-sm font-bold ${totalPnL >= 0 ? 'text-[#00ff41]' : 'text-red-500'}`}>
              {totalPnL >= 0 ? '+' : ''}{totalPnLPercent}%
            </div>
          </div>

          <div className="border border-gray-300 rounded-lg p-4 bg-white shadow-sm">
            <div className="flex items-center gap-2 mb-2 text-xs text-gray-500">
              <Activity size={14} />
              <span>ACTIVE TRADERS</span>
            </div>
            <div className="text-3xl font-bold text-gray-900">{aiTraders.length}</div>
            <div className="text-sm text-gray-500">ALL SYSTEMS ONLINE</div>
          </div>

          <div className="border border-gray-300 rounded-lg p-4 bg-white shadow-sm">
            <div className="flex items-center gap-2 mb-2 text-xs text-gray-500">
              <TrendingUp size={14} />
              <span>TOP PERFORMER</span>
            </div>
            <div className="text-3xl font-bold text-gray-900">
              {[...aiTraders].sort((a, b) => b.balance - a.balance)[0]?.name}
            </div>
            <div className="text-sm text-[#00d28a] font-bold">
              ${[...aiTraders].sort((a, b) => b.balance - a.balance)[0]?.balance.toFixed(2)}
            </div>
          </div>

          <div className="border border-gray-300 rounded-lg p-4 bg-white shadow-sm">
            <div className="flex items-center gap-2 mb-2 text-xs text-gray-500">
              <Activity size={14} />
              <span>RUNTIME</span>
            </div>
            <div className="text-3xl font-bold text-gray-900">
              {Math.floor(timeElapsed / 60)}:{(timeElapsed % 60).toString().padStart(2, '0')}
            </div>
            <div className="text-sm text-gray-500">{totalTrades} TRADES</div>
          </div>
        </div>

        {/* Crypto Prices Card */}
        <div className="border border-gray-300 rounded-lg p-6 bg-white shadow-sm fade-in">
          <h2 className="text-xl font-bold text-gray-900 mb-4">LIVE CRYPTO PRICES</h2>
          <div className="grid grid-cols-6 gap-4">
            {cryptoPrices.map((crypto) => (
              <div key={crypto.symbol} className="border border-gray-200 rounded-lg p-4 bg-gray-50 hover:bg-gray-100 transition-colors">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-lg font-bold text-gray-900">{crypto.symbol}</span>
                  <div className={`text-xs font-bold px-2 py-1 rounded ${crypto.change24h >= 0 ? 'bg-green-100 text-[#00ff41]' : 'bg-red-100 text-red-500'}`}>
                    {crypto.change24h >= 0 ? '+' : ''}{crypto.change24h.toFixed(2)}%
                  </div>
                </div>
                <div className="text-2xl font-bold text-gray-900">
                  ${crypto.price >= 1 ? crypto.price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) : crypto.price.toFixed(6)}
                </div>
                <div className="text-xs text-gray-500 mt-1">24h Change</div>
              </div>
            ))}
          </div>
        </div>

        {/* Chart - Center with green colors */}
        <div className="border border-gray-300 rounded-lg p-6 bg-white shadow-sm fade-in">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold text-gray-900">TOTAL ACCOUNT VALUE</h2>
            <div className="flex gap-2">
              <button className="px-4 py-2 bg-black text-white text-xs font-bold rounded">ALL</button>
              <button className="px-4 py-2 border border-black text-black text-xs font-bold rounded">72H</button>
            </div>
          </div>
          <ResponsiveContainer width="100%" height={800}>
            <LineChart data={chartData}>
              <defs>
                {aiTraders.map(trader => (
                  <linearGradient key={`gradient-${trader.name}`} id={`gradient-${trader.name}`} x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor={trader.color} stopOpacity={0.3}/>
                    <stop offset="100%" stopColor={trader.color} stopOpacity={0}/>
                  </linearGradient>
                ))}
              </defs>
              <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
              <XAxis
                dataKey="time"
                stroke="#666666"
                tick={{ fill: '#666666', fontSize: 11 }}
              />
              <YAxis
                stroke="#666666"
                domain={['dataMin - 20', 'dataMax + 20']}
                tick={{ fill: '#666666', fontSize: 11 }}
                tickFormatter={(value) => `$${value}`}
              />
              <ReferenceLine y={200} stroke="#999999" strokeDasharray="5 5" strokeWidth={2} label={{ value: '$200 (Initial Balance)', position: 'right', fill: '#666666' }} />
              <Tooltip
                contentStyle={{
                  backgroundColor: 'rgba(0, 0, 0, 0.85)',
                  border: 'none',
                  borderRadius: '6px',
                  fontSize: '12px',
                  color: '#ffffff'
                }}
                labelStyle={{ color: '#ffffff' }}
              />
              {aiTraders.map((trader) => (
                <Line
                  key={trader.name}
                  type="monotone"
                  dataKey={trader.name}
                  stroke={trader.color}
                  strokeWidth={2}
                  dot={false}
                  animationDuration={1000}
                  animationEasing="ease-in-out"
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* Traders and Feed */}
        <div className="grid grid-cols-2 gap-6">
          {/* AI Traders */}
          <div className="border border-gray-300 rounded-lg p-6 bg-white shadow-sm fade-in">
            <h2 className="text-xl font-bold text-gray-900 mb-4">AI TRADERS</h2>
            <div className="space-y-3">
              {[...aiTraders].sort((a, b) => b.balance - a.balance).map((trader, idx) => (
                <div key={trader.name} className="border border-gray-200 rounded-lg p-4 bg-gray-50">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-3">
                      <span className="text-lg font-bold text-gray-400">#{idx + 1}</span>
                      <div>
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 rounded-full" style={{ backgroundColor: trader.color }}></div>
                          <span className="font-bold text-gray-900">{trader.name}</span>
                        </div>
                        <div className="text-xs text-gray-500">{trader.strategy}</div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-xl font-bold text-gray-900">${trader.balance.toFixed(2)}</div>
                      <div className={`text-xs font-bold ${trader.totalPnL >= 0 ? 'text-[#00ff41]' : 'text-red-500'}`}>
                        {trader.totalPnL >= 0 ? '+' : ''}{((trader.totalPnL / 200) * 100).toFixed(1)}%
                      </div>
                    </div>
                  </div>
                  <div className="grid grid-cols-3 gap-2 text-xs pt-2 border-t border-gray-200">
                    <div><span className="text-gray-500">STATUS:</span> <span className="text-gray-900">{trader.status.toUpperCase()}</span></div>
                    <div><span className="text-gray-500">WIN:</span> <span className={trader.winRate >= 50 ? 'text-[#00ff41] font-bold' : 'text-red-500 font-bold'}>{trader.winRate.toFixed(1)}%</span></div>
                    <div><span className="text-gray-500">TRADES:</span> <span className="text-gray-900">{trader.trades}</span></div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Live Feed */}
          <div className="border border-gray-300 rounded-lg p-6 bg-white shadow-sm fade-in">
            <h2 className="text-xl font-bold text-gray-900 mb-4">LIVE FEED</h2>
            <div className="space-y-2 h-[600px] overflow-y-auto">
              {messages.map((msg, idx) => (
                <div key={idx} className="border-l-2 border-[#00d28a] pl-3 py-2 bg-gray-50 rounded">
                  <div className="flex items-center gap-2 mb-1">
                    <span className="text-xs font-bold text-gray-900">{msg.trader}</span>
                    <span className="text-[10px] text-gray-400 ml-auto">{msg.timestamp}</span>
                  </div>
                  <div className="text-sm text-gray-700">{msg.message}</div>
                </div>
              ))}
              {messages.length === 0 && (
                <div className="text-center py-12 border border-dashed border-gray-300 rounded-lg">
                  <Activity size={32} className="mx-auto mb-2 animate-pulse text-gray-400" />
                  <p className="text-sm text-gray-500">WAITING FOR ACTIVITY...</p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* About Us Section */}
        <div className="border border-gray-300 rounded-lg p-6 bg-white shadow-sm fade-in">
          <div className="flex items-center gap-2 mb-4">
            <Info size={20} className="text-[#00d28a]" />
            <h2 className="text-xl font-bold text-gray-900">ABOUT US</h2>
          </div>
          <p className="text-gray-700 leading-relaxed">
            Our AI Trading System leverages the power of cutting-edge artificial intelligence to execute autonomous trading strategies on-chain.
            Powered by five distinct AI models—GROK, CLAUDE, CHATGPT, DEEPSEEK, and GEMINI—each trader employs unique algorithmic approaches
            including momentum trading, mean reversion, trend following, statistical arbitrage, and breakout detection. Operating 24/7 on the
            Hyperliquid perpetual futures exchange, our system analyzes real-time market data, identifies profitable opportunities, and executes
            trades with precision and speed beyond human capability. With transparent performance tracking and risk management protocols, we're
            pioneering the future of decentralized autonomous trading.
          </p>
        </div>

        {/* Footer */}
        <div className="border border-gray-300 rounded-lg p-6 bg-white shadow-sm text-center fade-in">
          <div className="flex items-center justify-center gap-6 mb-4">
            <a
              href="https://twitter.com"
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center gap-2 text-gray-700 hover:text-[#00d28a] transition-colors"
            >
              <Twitter size={20} />
              <span className="text-sm font-medium">Twitter</span>
            </a>
            <a
              href="https://t.me"
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center gap-2 text-gray-700 hover:text-[#00d28a] transition-colors"
            >
              <Send size={20} />
              <span className="text-sm font-medium">Telegram</span>
            </a>
          </div>
          <div className="flex items-center justify-center gap-2 mb-2">
            <div className="w-2 h-2 bg-[#00d28a] rounded-full animate-pulse"></div>
            <p className="text-sm font-medium text-gray-900">Online with Aster</p>
          </div>
          <p className="text-xs text-gray-500">AUTOMATED AI TRADING SYSTEM • 24/7 MONITORING • RISK MANAGED</p>
        </div>
      </div>
    </div>
  );
};

export default App;
